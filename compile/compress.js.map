{
"version":3,
"file":"compile/compress.js",
"lineCount":35,
"mappings":"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",
"sources":["src/compressible.js","node_modules/@goa/statuses/src/codes.js","node_modules/@goa/statuses/src/index.js","node_modules/stream/index.js","src/bytes/index.js","src/index.js","node_modules/zlib/index.js","src/depack.js","node_modules/@goa/goa/modules/koa-is-json/index.js"],
"sourcesContent":["/*!\n * compressible\n * Copyright(c) 2013 Jonathan Ong\n * Copyright(c) 2014 Jeremiah Senkpiel\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\nconst db = require(/* depack-require */ 'mime-db')\n\n/**\n * Module variables.\n * @private\n */\n\nconst COMPRESSIBLE_TYPE_REGEXP = /^text\\/|\\+(?:json|text|xml)$/i\nconst EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\n\n/**\n * Module exports.\n * @public\n */\n\n/**\n * Checks if a type is compressible.\n *\n * @param {string} type\n * @return {?boolean} compressible\n */\nexport default function compressible (type) {\n  if (!type || typeof type != 'string') {\n    return false\n  }\n\n  // strip parameters\n  const match = EXTRACT_TYPE_REGEXP.exec(type)\n  const mime = match && match[1].toLowerCase()\n  const data = db[mime]\n\n  // return database information\n  if (data && data['compressible'] !== undefined) {\n    return data['compressible']\n  }\n\n  // fallback to regexp or unknown\n  return COMPRESSIBLE_TYPE_REGEXP.test(mime) || null\n}","export default {\n  [100]: 'Continue',\n  [101]: 'Switching Protocols',\n  [102]: 'Processing',\n  [103]: 'Early Hints',\n  [200]: 'OK',\n  [201]: 'Created',\n  [202]: 'Accepted',\n  [203]: 'Non-Authoritative Information',\n  [204]: 'No Content',\n  [205]: 'Reset Content',\n  [206]: 'Partial Content',\n  [207]: 'Multi-Status',\n  [208]: 'Already Reported',\n  [226]: 'IM Used',\n  [300]: 'Multiple Choices',\n  [301]: 'Moved Permanently',\n  [302]: 'Found',\n  [303]: 'See Other',\n  [304]: 'Not Modified',\n  [305]: 'Use Proxy',\n  [306]: '(Unused)',\n  [307]: 'Temporary Redirect',\n  [308]: 'Permanent Redirect',\n  [400]: 'Bad Request',\n  [401]: 'Unauthorized',\n  [402]: 'Payment Required',\n  [403]: 'Forbidden',\n  [404]: 'Not Found',\n  [405]: 'Method Not Allowed',\n  [406]: 'Not Acceptable',\n  [407]: 'Proxy Authentication Required',\n  [408]: 'Request Timeout',\n  [409]: 'Conflict',\n  [410]: 'Gone',\n  [411]: 'Length Required',\n  [412]: 'Precondition Failed',\n  [413]: 'Payload Too Large',\n  [414]: 'URI Too Long',\n  [415]: 'Unsupported Media Type',\n  [416]: 'Range Not Satisfiable',\n  [417]: 'Expectation Failed',\n  [418]: 'I\\'m a teapot',\n  [421]: 'Misdirected Request',\n  [422]: 'Unprocessable Entity',\n  [423]: 'Locked',\n  [424]: 'Failed Dependency',\n  [425]: 'Unordered Collection',\n  [426]: 'Upgrade Required',\n  [428]: 'Precondition Required',\n  [429]: 'Too Many Requests',\n  [431]: 'Request Header Fields Too Large',\n  [451]: 'Unavailable For Legal Reasons',\n  [500]: 'Internal Server Error',\n  [501]: 'Not Implemented',\n  [502]: 'Bad Gateway',\n  [503]: 'Service Unavailable',\n  [504]: 'Gateway Timeout',\n  [505]: 'HTTP Version Not Supported',\n  [506]: 'Variant Also Negotiates',\n  [507]: 'Insufficient Storage',\n  [508]: 'Loop Detected',\n  [509]: 'Bandwidth Limit Exceeded',\n  [510]: 'Not Extended',\n  [511]: 'Network Authentication Required',\n}\n","/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\nimport statusCodes from './codes'\n\n// status code to message map\nexport const STATUS_CODES = statusCodes\n\n// array of status codes\nexport const codes = populateStatusesMap(status, statusCodes)\n\n// status codes for redirects\nexport const redirect = {\n  [300]: true,\n  [301]: true,\n  [302]: true,\n  [303]: true,\n  [305]: true,\n  [307]: true,\n  [308]: true,\n}\n\n// status codes for empty bodies\nexport const empty = {\n  [204]: true,\n  [205]: true,\n  [304]: true,\n}\n\n// status codes for when you should retry the request\nexport const retry = {\n  [502]: true,\n  [503]: true,\n  [504]: true,\n}\n\n/**\n * Populate the statuses map for given codes.\n * @return {!Array<string>}\n * @private\n */\nfunction populateStatusesMap(statuses, allCodes) {\n  const arr = []\n\n  Object.keys(allCodes).forEach((code) => {\n    const message = statusCodes[code]\n    const s = Number(code)\n\n    // Populate properties\n    statuses[s] = message\n    statuses[message] = s\n    statuses[message.toLowerCase()] = s\n\n    // Add to array\n    arr.push(s)\n  })\n\n  return arr\n}\n\n/**\n * @param {string|number} code\n */\nexport default function status(code) {\n  if (typeof code == 'number') {\n    if (!status[code])\n      throw new Error('invalid status code: ' + code)\n    return code\n  }\n\n  if (typeof code != 'string')\n    throw new TypeError('code must be a number or string')\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n)\n    return n\n  }\n\n  n = status[code.toLowerCase()]\n  if (!n) throw new Error('invalid status message: \"' + code + '\"')\n  return n\n}\n","export default stream\nexport const {\n  Duplex,\n  PassThrough,\n  Readable,\n  Stream,\n  Transform,\n  Writable,\n} = stream","/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\nconst formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g\nconst formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/\n\nconst map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n}\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: (string|undefined),\n *  decimalPlaces: (number|undefined),\n *  fixedDecimals: (boolean|undefined),\n *  thousandsSeparator: (string|undefined),\n *  unitSeparator: (string|undefined),\n *  }} [options] bytes options.\n *\n * @returns {?(string|number)}\n */\n\nexport default function bytes(value, options) {\n  if (typeof value == 'string') {\n    return parse(value)\n  }\n\n  if (typeof value == 'number') {\n    return format(value, options)\n  }\n\n  return null\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {Object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n * @returns {?string}\n */\nexport function format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null\n  }\n\n  var mag = Math.abs(value)\n  var thousandsSeparator = (options && options.thousandsSeparator) || ''\n  var unitSeparator = (options && options.unitSeparator) || ''\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2\n  var fixedDecimals = Boolean(options && options.fixedDecimals)\n  var unit = (options && options.unit) || ''\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB'\n    } else if (mag >= map.tb) {\n      unit = 'TB'\n    } else if (mag >= map.gb) {\n      unit = 'GB'\n    } else if (mag >= map.mb) {\n      unit = 'MB'\n    } else if (mag >= map.kb) {\n      unit = 'KB'\n    } else {\n      unit = 'B'\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()]\n  var str = val.toFixed(decimalPlaces)\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1')\n  }\n\n  if (thousandsSeparator) {\n    str = str.replace(formatThousandsRegExp, thousandsSeparator)\n  }\n\n  return str + unitSeparator + unit\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nexport function parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val\n  }\n\n  if (typeof val !== 'string') {\n    return null\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val)\n  var floatValue\n  var unit = 'b'\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10)\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1])\n    unit = results[4].toLowerCase()\n  }\n\n  return Math.floor(map[unit] * floatValue)\n}","import compressible from './compressible'\nimport isJSON from '@goa/goa/modules/koa-is-json'\nimport { empty } from '@goa/statuses'\nimport Stream, { Readable, Transform } from 'stream'\nimport { createGzip, createDeflate } from 'zlib'\nimport bytes from './bytes'\n\n/**\n * Encoding methods supported.\n */\nconst encodingMethods = {\n  gzip: createGzip,\n  deflate: createDeflate,\n}\n\n/**\n * @type {_goa.compress}\n */\nfunction Compress(options = {}) {\n  let { filter = compressible, threshold = 1024 } = options\n  if (typeof threshold == 'string') threshold = bytes(threshold)\n\n  /**\n   * @type {!_idio.Middleware}\n   */\n  async function middleware(ctx, next) {\n    ctx.vary('Accept-Encoding')\n\n    await next()\n\n    let { body } = ctx\n    if (!body) return\n    if (ctx.res.headersSent || !ctx.writable) return\n    if (ctx.compress === false) return\n    if (ctx.request.method == 'HEAD') return\n    if (empty[ctx.response.status]) return\n    if (ctx.response.get('Content-Encoding')) return\n\n    // forced compression or implied\n    if (!(ctx.compress === true || filter(ctx.response.type))) return\n\n    // identity\n    const encoding = /** @type {string} */ (ctx.acceptsEncodings('gzip', 'deflate', 'identity'))\n    if (!encoding) ctx.throw(406, 'supported encodings: gzip, deflate, identity')\n    if (encoding == 'identity') return\n\n    // json\n    if (isJSON(body)) body = ctx.body = JSON.stringify(body)\n\n    // threshold\n    if (threshold) {\n      if (ctx.body instanceof Readable) {\n        const st = /** @type {!stream.Readable} */ (ctx.body)\n        let totalLength = 0\n        let resolved = false\n        let error\n        const { newStream, callback } = await new Promise((re, j) => {\n          const r = new Transform(/** @type {!stream.TransformOptions} */({\n            transform(data, enc, cb) {\n              this.push(data)\n              if (resolved) {\n                cb()\n                return\n              }\n              totalLength += data.length\n              if (totalLength > threshold) {\n                resolved = true\n                re({ newStream: this, callback: cb })\n              } else cb()\n            },\n          }))\n          r.once('finish', () => re({ newStream: r }))\n          st.once('error', (err) => {\n            error = err\n            re({})\n          })\n          r.once('error', j)\n          st.pipe(r)\n          r.pause()\n        })\n\n        if (error) return // handled by Koa\n        body = newStream\n        body.resume()\n        if (!callback) {\n          ctx.body = body\n          return\n        }\n        callback()\n      } else if (ctx.response.length < threshold) return\n    }\n\n    ctx.set('Content-Encoding', encoding)\n    ctx.res.removeHeader('Content-Length')\n\n    const compression = ctx.body = encodingMethods[encoding](options)\n\n    if (body instanceof Stream) {\n      body.pipe(compression)\n    } else {\n      compression.end(body)\n    }\n  }\n  return /** @type {!_goa.Middleware} */ (middleware)\n}\n\nexport default Compress\n\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('@typedefs/idio').Middleware} _idio.Middleware\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').CompressConfig} _goa.CompressConfig\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('..').compress} _goa.compress\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').Readable} stream.Readable\n */\n/**\n * @suppress {nonStandardJsDocs}\n * @typedef {import('stream').TransformOptions} stream.TransformOptions\n */","export default zlib\nexport const {\n  Deflate,\n  DeflateRaw,\n  Gunzip,\n  Gzip,\n  Inflate,\n  InflateRaw,\n  Unzip,\n  Z_BEST_COMPRESSION,\n  Z_BEST_SPEED,\n  Z_BLOCK,\n  Z_BUF_ERROR,\n  Z_DATA_ERROR,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_ERRNO,\n  Z_FILTERED,\n  Z_FINISH,\n  Z_FIXED,\n  Z_FULL_FLUSH,\n  Z_HUFFMAN_ONLY,\n  Z_MEM_ERROR,\n  Z_NEED_DICT,\n  Z_NO_COMPRESSION,\n  Z_NO_FLUSH,\n  Z_OK,\n  Z_PARTIAL_FLUSH,\n  Z_RLE,\n  Z_STREAM_END,\n  Z_STREAM_ERROR,\n  Z_SYNC_FLUSH,\n  Z_VERSION_ERROR,\n  constants,\n  createDeflate,\n  createDeflateRaw,\n  createGunzip,\n  createGzip,\n  createInflate,\n  createInflateRaw,\n  createUnzip,\n  deflate,\n  deflateRaw,\n  deflateRawSync,\n  deflateSync,\n  gunzip,\n  gunzipSync,\n  gzip,\n  gzipSync,\n  inflate,\n  inflateRaw,\n  inflateRawSync,\n  inflateSync,\n  unzip,\n  unzipSync,\n} = zlib","import '@externs/goa'\nimport '@externs/idio'\nimport '../types/externs'\nimport compress from './'\n\nmodule.exports = {\n  '_compress': compress,\n}","/**\n * Check if `body` should be interpreted as json.\n */\nexport default function isJSON(body) {\n  if (!body) return false\n  if ('string' == typeof body) return false\n  if ('function' == typeof body['pipe']) return false\n  if (Buffer.isBuffer(body)) return false\n  return true\n}\n\n/**\n * @license MIT\n * Jonathan Ong\n * https://npmjs.org/koa-is-json\n */\n"],
"names":["db","require","COMPRESSIBLE_TYPE_REGEXP","EXTRACT_TYPE_REGEXP","compressible","type","mime","match","exec","toLowerCase","data","undefined","test","$jscompDefaultExport","populateStatusesMap","empty","statuses","status","arr","Object","keys","statusCodes","forEach","code","message","s","Number","push","Error","TypeError","n","parseInt","isNaN","stream","Readable","Transform","formatDecimalsRegExp","map","b","kb","mb","gb","tb","Math","pow","pb","parseRegExp","bytes","value","val","results","floatValue","parseFloat","unit","floor","isFinite","mag","abs","str","toFixed","decimalPlaces","replace","encodingMethods","gzip","zlib","createGzip","deflate","createDeflate","module","exports","Compress","options","filter","threshold","middleware","ctx","next","vary","body","headersSent","res","writable","compress","request","method","response","get","encoding","acceptsEncodings","throw","Buffer","isBuffer","JSON","stringify","st","totalLength","resolved","error","newStream","callback","Promise","re","j","r","transform","enc","cb","length","once","err","pipe","pause","resume","set","removeHeader","compression","Stream","end"]
}
